title Join Public Room Event
participantgroup #fff2e5 <size:20>**Client**</size>
participant Client
end
participantgroup #e5fcff <size:20>**Server**</size>
participant ClientConnection
participant JoinPublicRoomMessage
participant SetupMessageHandler
participant ServerController
participant Room
participant Game
participant Server
end
activate Server
activate ServerController
activate Client
activate ClientConnection
activate SetupMessageHandler

loop until login is successful

Client ->ClientConnection: JoinPublicRoomMessage(numberOfPlayers, username)
 
ClientConnection ->JoinPublicRoomMessage: accept(SetupMessageHandler)
activate JoinPublicRoomMessage

JoinPublicRoomMessage->SetupMessageHandler: handle(JoinPublicRoomMessage)
deactivate JoinPublicRoomMessage

SetupMessageHandler->ServerController: addPlayerToPublicRoom(numberOfPlayers, username, clientConnection)

group error [if parameters are invalid]

ServerController--#red>ClientConnection: sendMessage(ErrorMessage("invalid parameters"))

ClientConnection--#red>Client: ErrorMessage("invalid parameters")
end
end

ServerController->Server: getPendingConnections().remove(clientConnection)
 
ServerController->Room: addConnection(clientConnection)

ServerController->Server: find a room with the requested number of players

Server-->ServerController: room

ServerController->Room: getGame()
activate Room

ServerController<--Room: game()

ServerController->Game: addPlayer(username)
activate Game


ServerController->Room: sendAll(RoomDetailsMessage(players, numberOfPlayers, roomID))
loop for each connected player

Room-->ClientConnection: sendMessage(RoomDetailsMessage(players, numberOfPlayers, roomID))

ClientConnection-->Client: RoomDetailsMessage(players, numberOfPlayers, roomID)

end