title Get Marbles

participantgroup #fff2e5 <size:20>**Client**</size>
participant Client
end
participantgroup #e5fcff <size:20>**Server**</size>
participant ClientConnection
participant SelectedMoveMessage
participant SelectMarblesResponseMessage
participant DropResourcesResponseMessage
participant GameMessageHandler
participant GameController
participant Game
participant Market
participant MarbleStructure
participant Warehouse
participant Player
participant Room
end

activate GameController
activate GameMessageHandler
activate Client
activate ClientConnection
activate Game
activate Player
activate Room
activate Market
activate MarbleStructure
activate Warehouse

loop until move is valid

ClientConnection -> Client: PossibleMoves (..., "GET_MARBLES",...)
 
Client->ClientConnection: SelectedMove("GET_MARBLES")
 
ClientConnection ->SelectedMoveMessage: accept(GameMessageHandler)
 
activate SelectedMoveMessage

SelectedMoveMessage->GameMessageHandler: handle(SelectedMoveMessage...)
deactivate SelectedMoveMessage
GameMessageHandler->GameController:selectMove(...)
group error [if move is invalid]

GameController--#red>ClientConnection:sendErrorMessage(Invalid move)

ClientConnection--#red>Client:InvalidMoveError
end
end
GameController -->ClientConnection:sendMessage(new SelectMarblesRequestMessage ())
 
ClientConnection -->Client:SelectMarblesRequestMessage ()

ClientConnection <-Client:SelectMarblesResponseMessage(int index, String rowOrColumn)
 
  
ClientConnection ->SelectMarblesResponseMessage:accept(GameMessageHandler)
activate SelectMarblesResponseMessage
 

SelectMarblesResponseMessage->GameMessageHandler:handle(SelectMarblesReponseMessage(...)...)
deactivate SelectMarblesResponseMessage
GameMessageHandler -> GameController:selectMatbles (int index, String roworColumn) 
 
GameController->Game : getCurrentPlayer()

GameController <--Game : currentPlayer

GameController ->Game: getMarket()
Game -->GameController:market

GameController ->Market: getMarbleStructure()
 
Market --> GameController: marbleStructure 
 
GameController ->MarbleStructure: shiftRow(index) / shiftColumn(index)
 
MarbleStructure -->GameController : List<Marble> originalColumnOrRow
 
GameController ->GameController:calculateEquivalentResources(List<Marble>)
 
GameController -->ClientConnection:sendMessage(new DropResourceRequest(List<Resource>))

ClientConnection -->Client:DropResourceRequest(List<Resource>)
 
Client ->ClientConnection:DropResourceResponse(List<Resource>)
ClientConnection->SelectMarblesResponseMessage:accept(GameMessageHandler)
 
ClientConnection ->DropResourcesResponseMessage:accept(GameMessageHandler)
activate DropResourcesResponseMessage

DropResourcesResponseMessage->GameMessageHandler:handle(DropResourcesReponseMessage(List<Resource>)...)
deactivate DropResourcesResponseMessage

GameMessageHandler ->GameController:dropResources(List<Resource>)
 
GameController ->GameController: checkDroppedResources

group error [if more marbles need to be dropped]
 
GameController--#red>ClientConnection:sendMessage (new ErrorMessage ("Not enough"))

ClientConnection--#red>Client:ErrorMessage
end
GameController ->Player: getPlayerBoard().getWarehouse()

GameController <--Player: warehouse

GameController ->Warehouse: placeResources()

GameController ->Room:\nsendAll(new GameStateMessage(Game))

loop for each connected player

Room-->ClientConnection: sendMessage(RoomDetailsMessage(players, numberOfPlayers, roomID))

ClientConnection-->Client: RoomDetailsMessage(players, numberOfPlayers, roomID)

end