title PlayLeaderCard

participantgroup #fff2e5 <size:20>**Client**</size>
participant Client
end
participantgroup #e5fcff <size:20>**Server**</size>
participant ClientConnection
participant SelectedMoveMessage
participant SelectLeaderCardResponseMessage
participant GameMessageHandler
participant GameController
participant Game
participant Player
participant Room
end
activate GameController
activate GameMessageHandler
activate Client
activate ClientConnection
activate Game
activate Player
activate Room

loop until move is valid
ClientConnection -> Client:PossibleMoves (..., "PLAY_LEADER",...)
 
Client->ClientConnection:SelectedMove("PLAY_LEADER")

ClientConnection ->SelectedMoveMessage:accept(GameMessageHandler)
 
activate SelectedMoveMessage

SelectedMoveMessage->GameMessageHandler:handle(SelectedMoveMessage...)
deactivate SelectedMoveMessage
GameMessageHandler->GameController:selectMove(...)

group error [if parameters are invalid]

GameController--#red>ClientConnection:sendErrorMessage(Invalid move)

ClientConnection--#red>Client:InvalidMoveError
end
end
GameController->Game : getCurrentPlayer()


 GameController <--Game : currentPlayer
 
  GameController ->Player:getNotPlayedLeaderCards()
 Player -->GameController: List<LeaderCard>
 
 GameController -->ClientConnection:sendMessage(new SelectLeaderCardRequestMessage (List<LeaderCard> ))
 
ClientConnection -->Client:SelectLeaderCardRequestMessage(List<LeaderCard>)

ClientConnection <-Client:SelectLeaderCardReponseMessage(LeaderCard)
 
  
ClientConnection ->SelectLeaderCardResponseMessage:accept(GameMessageHandler)
activate SelectLeaderCardResponseMessage
 

SelectLeaderCardResponseMessage->GameMessageHandler:handle(SelectLeaderCardReponseMessage(...)...)
deactivate SelectLeaderCardResponseMessage
GameMessageHandler -> GameController: playLeaderCard (LeaderCard) 
 
GameController->Game : getCurrentPlayer()

GameController <--Game : currentPlayer
 
GameController ->Player :playLeaderCard (LeaderCard)


GameController->Room: sendAll(new GameStateMessage(Game))

loop for each connected player

Room-->ClientConnection: sendMessage(RoomDetailsMessage(players, numberOfPlayers, roomID))

ClientConnection-->Client: RoomDetailsMessage(players, numberOfPlayers, roomID)

end
 
 




